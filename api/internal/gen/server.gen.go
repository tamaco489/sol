// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package gen

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Checks the health of the API
	// (GET /healthcheck)
	Healthcheck(c *gin.Context)
	// Create a new user
	// (POST /v1/users)
	CreateUser(c *gin.Context)
	// Create a new user profile
	// (POST /v1/users/profiles)
	CreateProfile(c *gin.Context)
	// Delete a user profile image
	// (DELETE /v1/users/profiles/images)
	DeleteProfileImage(c *gin.Context)
	// Get user profile images
	// (GET /v1/users/profiles/images)
	GetProfileImage(c *gin.Context, params GetProfileImageParams)
	// Create a new user profile image
	// (POST /v1/users/profiles/images)
	CreateProfileImage(c *gin.Context)
	// Update a user profile image
	// (PUT /v1/users/profiles/images)
	UpdateProfileImage(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// Healthcheck operation middleware
func (siw *ServerInterfaceWrapper) Healthcheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Healthcheck(c)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// CreateProfile operation middleware
func (siw *ServerInterfaceWrapper) CreateProfile(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProfile(c)
}

// DeleteProfileImage operation middleware
func (siw *ServerInterfaceWrapper) DeleteProfileImage(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProfileImage(c)
}

// GetProfileImage operation middleware
func (siw *ServerInterfaceWrapper) GetProfileImage(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProfileImageParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProfileImage(c, params)
}

// CreateProfileImage operation middleware
func (siw *ServerInterfaceWrapper) CreateProfileImage(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProfileImage(c)
}

// UpdateProfileImage operation middleware
func (siw *ServerInterfaceWrapper) UpdateProfileImage(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateProfileImage(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/healthcheck", wrapper.Healthcheck)
	router.POST(options.BaseURL+"/v1/users", wrapper.CreateUser)
	router.POST(options.BaseURL+"/v1/users/profiles", wrapper.CreateProfile)
	router.DELETE(options.BaseURL+"/v1/users/profiles/images", wrapper.DeleteProfileImage)
	router.GET(options.BaseURL+"/v1/users/profiles/images", wrapper.GetProfileImage)
	router.POST(options.BaseURL+"/v1/users/profiles/images", wrapper.CreateProfileImage)
	router.PUT(options.BaseURL+"/v1/users/profiles/images", wrapper.UpdateProfileImage)
}

type AlreadyExistsResponse struct {
}

type BadRequestResponse struct {
}

type ForbiddenResponse struct {
}

type InternalServerErrorResponse struct {
}

type NotFoundResponse struct {
}

type UnauthorizedResponse struct {
}

type HealthcheckRequestObject struct {
}

type HealthcheckResponseObject interface {
	VisitHealthcheckResponse(w http.ResponseWriter) error
}

type Healthcheck200JSONResponse HealthCheck

func (response Healthcheck200JSONResponse) VisitHealthcheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserRequestObject struct {
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201JSONResponse CreateUsersResponse

func (response CreateUser201JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser401Response = UnauthorizedResponse

func (response CreateUser401Response) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateUser500Response = InternalServerErrorResponse

func (response CreateUser500Response) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateProfileRequestObject struct {
	Body *CreateProfileJSONRequestBody
}

type CreateProfileResponseObject interface {
	VisitCreateProfileResponse(w http.ResponseWriter) error
}

type CreateProfile201JSONResponse CreateProfilesResponse

func (response CreateProfile201JSONResponse) VisitCreateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateProfile400Response = BadRequestResponse

func (response CreateProfile400Response) VisitCreateProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateProfile401Response = UnauthorizedResponse

func (response CreateProfile401Response) VisitCreateProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateProfile403Response = ForbiddenResponse

func (response CreateProfile403Response) VisitCreateProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateProfile409Response = AlreadyExistsResponse

func (response CreateProfile409Response) VisitCreateProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type CreateProfile500Response = InternalServerErrorResponse

func (response CreateProfile500Response) VisitCreateProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DeleteProfileImageRequestObject struct {
}

type DeleteProfileImageResponseObject interface {
	VisitDeleteProfileImageResponse(w http.ResponseWriter) error
}

type DeleteProfileImage204Response struct {
}

func (response DeleteProfileImage204Response) VisitDeleteProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteProfileImage400Response = BadRequestResponse

func (response DeleteProfileImage400Response) VisitDeleteProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteProfileImage401Response = UnauthorizedResponse

func (response DeleteProfileImage401Response) VisitDeleteProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteProfileImage403Response = ForbiddenResponse

func (response DeleteProfileImage403Response) VisitDeleteProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteProfileImage404Response = NotFoundResponse

func (response DeleteProfileImage404Response) VisitDeleteProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteProfileImage500Response = InternalServerErrorResponse

func (response DeleteProfileImage500Response) VisitDeleteProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetProfileImageRequestObject struct {
	Params GetProfileImageParams
}

type GetProfileImageResponseObject interface {
	VisitGetProfileImageResponse(w http.ResponseWriter) error
}

type GetProfileImage200JSONResponse GetProfilesImagesResponse

func (response GetProfileImage200JSONResponse) VisitGetProfileImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProfileImage400Response = BadRequestResponse

func (response GetProfileImage400Response) VisitGetProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetProfileImage401Response = UnauthorizedResponse

func (response GetProfileImage401Response) VisitGetProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetProfileImage403Response = ForbiddenResponse

func (response GetProfileImage403Response) VisitGetProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetProfileImage404Response = NotFoundResponse

func (response GetProfileImage404Response) VisitGetProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetProfileImage500Response = InternalServerErrorResponse

func (response GetProfileImage500Response) VisitGetProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateProfileImageRequestObject struct {
	Body *CreateProfileImageJSONRequestBody
}

type CreateProfileImageResponseObject interface {
	VisitCreateProfileImageResponse(w http.ResponseWriter) error
}

type CreateProfileImage201JSONResponse CreateProfilesImagesResponse

func (response CreateProfileImage201JSONResponse) VisitCreateProfileImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateProfileImage400Response = BadRequestResponse

func (response CreateProfileImage400Response) VisitCreateProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateProfileImage401Response = UnauthorizedResponse

func (response CreateProfileImage401Response) VisitCreateProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateProfileImage403Response = ForbiddenResponse

func (response CreateProfileImage403Response) VisitCreateProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateProfileImage409Response = AlreadyExistsResponse

func (response CreateProfileImage409Response) VisitCreateProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type CreateProfileImage500Response = InternalServerErrorResponse

func (response CreateProfileImage500Response) VisitCreateProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type UpdateProfileImageRequestObject struct {
	Body *UpdateProfileImageJSONRequestBody
}

type UpdateProfileImageResponseObject interface {
	VisitUpdateProfileImageResponse(w http.ResponseWriter) error
}

type UpdateProfileImage201JSONResponse UpdateProfilesImagesResponse

func (response UpdateProfileImage201JSONResponse) VisitUpdateProfileImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProfileImage400Response = BadRequestResponse

func (response UpdateProfileImage400Response) VisitUpdateProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdateProfileImage401Response = UnauthorizedResponse

func (response UpdateProfileImage401Response) VisitUpdateProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateProfileImage403Response = ForbiddenResponse

func (response UpdateProfileImage403Response) VisitUpdateProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type UpdateProfileImage404Response = NotFoundResponse

func (response UpdateProfileImage404Response) VisitUpdateProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateProfileImage500Response = InternalServerErrorResponse

func (response UpdateProfileImage500Response) VisitUpdateProfileImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Checks the health of the API
	// (GET /healthcheck)
	Healthcheck(ctx context.Context, request HealthcheckRequestObject) (HealthcheckResponseObject, error)
	// Create a new user
	// (POST /v1/users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// Create a new user profile
	// (POST /v1/users/profiles)
	CreateProfile(ctx context.Context, request CreateProfileRequestObject) (CreateProfileResponseObject, error)
	// Delete a user profile image
	// (DELETE /v1/users/profiles/images)
	DeleteProfileImage(ctx context.Context, request DeleteProfileImageRequestObject) (DeleteProfileImageResponseObject, error)
	// Get user profile images
	// (GET /v1/users/profiles/images)
	GetProfileImage(ctx context.Context, request GetProfileImageRequestObject) (GetProfileImageResponseObject, error)
	// Create a new user profile image
	// (POST /v1/users/profiles/images)
	CreateProfileImage(ctx context.Context, request CreateProfileImageRequestObject) (CreateProfileImageResponseObject, error)
	// Update a user profile image
	// (PUT /v1/users/profiles/images)
	UpdateProfileImage(ctx context.Context, request UpdateProfileImageRequestObject) (UpdateProfileImageResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Healthcheck operation middleware
func (sh *strictHandler) Healthcheck(ctx *gin.Context) {
	var request HealthcheckRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Healthcheck(ctx, request.(HealthcheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Healthcheck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HealthcheckResponseObject); ok {
		if err := validResponse.VisitHealthcheckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx *gin.Context) {
	var request CreateUserRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProfile operation middleware
func (sh *strictHandler) CreateProfile(ctx *gin.Context) {
	var request CreateProfileRequestObject

	var body CreateProfileJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProfile(ctx, request.(CreateProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProfile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateProfileResponseObject); ok {
		if err := validResponse.VisitCreateProfileResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProfileImage operation middleware
func (sh *strictHandler) DeleteProfileImage(ctx *gin.Context) {
	var request DeleteProfileImageRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProfileImage(ctx, request.(DeleteProfileImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProfileImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteProfileImageResponseObject); ok {
		if err := validResponse.VisitDeleteProfileImageResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProfileImage operation middleware
func (sh *strictHandler) GetProfileImage(ctx *gin.Context, params GetProfileImageParams) {
	var request GetProfileImageRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProfileImage(ctx, request.(GetProfileImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProfileImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProfileImageResponseObject); ok {
		if err := validResponse.VisitGetProfileImageResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProfileImage operation middleware
func (sh *strictHandler) CreateProfileImage(ctx *gin.Context) {
	var request CreateProfileImageRequestObject

	var body CreateProfileImageJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProfileImage(ctx, request.(CreateProfileImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProfileImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateProfileImageResponseObject); ok {
		if err := validResponse.VisitCreateProfileImageResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProfileImage operation middleware
func (sh *strictHandler) UpdateProfileImage(ctx *gin.Context) {
	var request UpdateProfileImageRequestObject

	var body UpdateProfileImageJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProfileImage(ctx, request.(UpdateProfileImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProfileImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateProfileImageResponseObject); ok {
		if err := validResponse.VisitUpdateProfileImageResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
