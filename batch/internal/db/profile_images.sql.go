// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: profile_images.sql

package db

import (
	"context"
	"database/sql"
)

const deleteProfileImageByID = `-- name: DeleteProfileImageByID :exec
DELETE FROM profile_images WHERE id = ?
`

func (q *Queries) DeleteProfileImageByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProfileImageByID, id)
	return err
}

const findProfileImageByUserIDAndFilePath = `-- name: FindProfileImageByUserIDAndFilePath :one
SELECT
  id,
  user_id,
  file_path,
  uploaded_at
FROM profile_images
WHERE user_id = ? AND file_path = ?
`

type FindProfileImageByUserIDAndFilePathParams struct {
	UserID   int64
	FilePath string
}

type FindProfileImageByUserIDAndFilePathRow struct {
	ID         int64
	UserID     int64
	FilePath   string
	UploadedAt sql.NullTime
}

func (q *Queries) FindProfileImageByUserIDAndFilePath(ctx context.Context, arg FindProfileImageByUserIDAndFilePathParams) (FindProfileImageByUserIDAndFilePathRow, error) {
	row := q.db.QueryRowContext(ctx, findProfileImageByUserIDAndFilePath, arg.UserID, arg.FilePath)
	var i FindProfileImageByUserIDAndFilePathRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FilePath,
		&i.UploadedAt,
	)
	return i, err
}

const findProfileImageUploadFileByUserID = `-- name: FindProfileImageUploadFileByUserID :one
SELECT id FROM profile_images WHERE user_id = ?
`

func (q *Queries) FindProfileImageUploadFileByUserID(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, findProfileImageUploadFileByUserID, userID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateProfileImageByID = `-- name: UpdateProfileImageByID :exec
UPDATE profile_images SET
  uploaded_at = ?
WHERE id = ?
`

type UpdateProfileImageByIDParams struct {
	UploadedAt sql.NullTime
	ID         int64
}

func (q *Queries) UpdateProfileImageByID(ctx context.Context, arg UpdateProfileImageByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateProfileImageByID, arg.UploadedAt, arg.ID)
	return err
}
